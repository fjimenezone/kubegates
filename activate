#
bye () {
  printf "%s\n" "$1" >&2
  return 1
}

verify() {
    # This file can only be sourced
    [[  ${BASH_SOURCE-} = $0 ]] && bye "You must source this file: \$ source $0"

    # Prevent apply the source multiple times in the same terminal session
    if [[ -n $CLUSTER_NAME ]]; then
        bye "Nested environments are not permitted"
    else
        
        SOURCE_FILE=$(readlink ${BASH_SOURCE})

        # Root of isolation
        SOURCE_DIR=$(readlink -f $(dirname $BASH_SOURCE))

        CONF="$SOURCE_DIR/config"
        [[ ! -e $CONF ]] && bye "The kubectl config file is missing"
       
        # The cluster name
        CLUSTER_NAME=$(basename ${SOURCE_DIR})
        
        if ! grep -q "$CLUSTER_NAME" "$CONF"; then
            bye "Cluster name $CLUSTER_NAME is not configured within $CONF"
        fi
    fi 
    return 
}

deactivate () {
    # Reset old environment variables
    if [ -n "${_OLD_PATH:-}" ] ; then
        PATH="${_OLD_PATH:-}"
        export PATH
        unset _OLD_PATH
    fi

    if [ -n "${_OLD_PS1:-}" ] ; then
        PS1="${_OLD_PS1:-}"
        export PS1
        unset _OLD_PS1
    fi

    # Reset the hash table
    hash -r 2> /dev/null

    unset KUBECONFIG CLUSTER_NAME SOURCE_DIR SOURCE_FILE
    if [ ! "${1:-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

engage() {

    # Reset the hash table
    hash -r 2> /dev/null

    _OLD_PATH=$PATH
    # Push binary directory to the head of PATH
    export PATH="${SOURCE_DIR}:${PATH}"
    
    # Point kubectl to the right cluster config
    export KUBECONFIG=$CONF
    
    # Add a bit of text to the terminal prompt
    _OLD_PS1=$PS1
    color='\[\033[1;37m\]'
    NC='\[\033[0m\]'
    [[ -e $SOURCE_DIR/color ]] && source $SOURCE_DIR/color
    #export PS1="${PS1}${color}${CLUSTER_NAME}${NC} ➤ "
    export PS1="${color}${CLUSTER_NAME}${NC} ➤ "
}

verify && engage
